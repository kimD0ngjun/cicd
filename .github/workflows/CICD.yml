name: CICD

# event trigger: main push or main pull request
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# read permit
permissions:
  contents: read

# job unit
# 1.build -> 2.deploy
jobs:
  build:
    runs-on: ubuntu-latest  # 우분투 최신버전(가상 PC가 주어짐)
    steps:  # name 단위로 나눠서 스탭을 밟음
      - uses: actions/checkout@v3  # uses: 깃헙 액션의 탬플릿(자동으로 우분투에 깃 세팅, pull까지)
      # 자바 17 세팅
      - name: Install JDK 17
        uses: actions/setup-java@v3  # 자동으로 자바 세팅
        with:
          java-version: '17'
          distribution: 'temurin'

      # 실행 권한 부여 후, gradle 기반 test 없이 빌드해서 jar 파일 생성
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 도커 이미지화해서 도커허브에 푸시하고 ec2에서 풀 받기 위해 도커 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 도커파일 기반으로 빌드
      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/live_server .

      # 도커허브에 푸시
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 응답 코드를 기반으로 nginx 업스트림 지정
      # /env 요청을 보내 받은 응답 및 응답코드를 바탕으로 blue? green? 선택
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi

      # ec2에 세팅한 도커 컴포즈 실행
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d

      # nginx가 청색에서 다른 청색으로 넘길 때, 동작 여부를 먼저 파악해야함
      # 그 파악을 health check라고 하는데, 그 과정을 명시한 것
      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/env
          max-attempts: 5
          retry-delay: 10s

      # 도커 nginx에 저장해둔 컨테이너 이름 변경
      # 그와 동시에 바로 nginx 리로드
      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      # 기존 컨테이너 중지 후, 삭제
      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}
